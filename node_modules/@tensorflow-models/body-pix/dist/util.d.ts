import * as tf from '@tensorflow/tfjs';
import { BodyPixInput } from './types';
export declare function getInputTensorDimensions(input: BodyPixInput): [number, number];
export declare function toInputTensor(input: BodyPixInput): tf.Tensor<tf.Rank.R3>;
export declare function resizeAndPadTo(input: BodyPixInput, [targetH, targetW]: [number, number], flipHorizontal?: boolean): {
    resizedAndPadded: tf.Tensor3D;
    paddedBy: [[number, number], [number, number]];
};
export declare function scaleAndCropToInputTensorShape(tensor: tf.Tensor3D, [inputTensorHeight, inputTensorWidth]: [number, number], [resizedAndPaddedHeight, resizedAndPaddedWidth]: [number, number], [[padT, padB], [padL, padR]]: [[number, number], [number, number]]): tf.Tensor3D;
export declare function removePaddingAndResizeBack(resizedAndPadded: tf.Tensor3D, [originalHeight, originalWidth]: [number, number], [[padT, padB], [padL, padR]]: [[number, number], [number, number]]): tf.Tensor3D;
export declare function resize2d(tensor: tf.Tensor2D, resolution: [number, number], nearestNeighbor?: boolean): tf.Tensor2D;
