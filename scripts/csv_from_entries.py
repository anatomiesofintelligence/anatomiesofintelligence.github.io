#!/usr/bin/env python
"""
Make a CSV file from all markdown posts in a given directory.
"""
from __future__ import print_function
import os
import sys
import argparse
import csv
import frontmatter as fm
from pathlib import Path
import string
import re

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    #parser.add_argument('mode', choices=['fromfiles', 'fromcsv'], help='Choose an operation mode: fromfiles - make a new metadata.csv file from wavs, fromcsv - from a csv file generated by xml2csv')
    parser.add_argument('input', help="Input directory of md files")
    parser.add_argument('--stripdates', action='store_true', help="Remove leading dates from file names")
    parser.add_argument('--tolower', action='store_true', help="Make file names all lowercase")
    parser.add_argument('-o', '--outfile', help="Output file (by default writes metadata.csv to the same directory as input)")

    args = parser.parse_args()

    indir = args.input
    stripdates = args.stripdates
    tolower = args.tolower

    if args.outfile is None:
        outfile = "metadata.csv"
    else:
        outfile = args.outfile

    inpath = Path(indir)
    alltags = []
    allentries = []
    for file in inpath.iterdir():
        if os.path.splitext(file)[1] == ".md":
            post = fm.load(file)
            entry = {}

            filename = file.name
            if stripdates:
                match = re.search('^([0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2}\-)([_a-zA-Z0-9\-\.]+\\.md)$', file.name)
                if match is None:
                    print("No date found", file.name)
                else:
                    filename = match.group(2)
                    print("Removed date from", file.name)
            if tolower:
                filename = filename.lower()
            entry['filename'] = filename

            for tag in post['tags']:
                if tag not in alltags:
                    alltags.append(tag)
            for key in post.keys():
                entry[key] = post[key]
            entry['content'] = post.content
            allentries.append(entry)
        else:
            print("Ignoring file: {}".format(file))

    # alphabetically sort all tags / entries by file name
    alltags.sort()
    def getFilename(el):
        return el['filename']
    allentries.sort(key=getFilename)

    # compile column names
    firstcolumns = ['filename', 'entry-date', 'entry-by', 'layout', 'entry-type', 'image', 'title']
    allcolumns = firstcolumns.copy()
    for key in [*allentries[0]]:
        if key not in (firstcolumns + ['tags', 'weights']):
            allcolumns.append(key)
    allcolumns.append("TAGS:")
    for tag in alltags:
        allcolumns.append(tag)

    with open(outfile, 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile, delimiter=',')
        csvwriter.writerow(allcolumns)
        for entry in allentries:
            row = []
            for col in allcolumns:
                if col in alltags:
                    etags = entry['tags']
                    eweights = entry['weights']
                    if col not in etags:
                        val = 0.0
                    else:
                        val = eweights[etags.index(col)]
                else:
                    if col in entry:
                        val = entry[col]
                    else:
                        val = ""
                row.append(val)
            csvwriter.writerow(row)
    print("WROTE CSV FILE to '{}'".format(outfile))
